name: Build & Publish NuGet (main branch)

on:
  push:
    branches: [ main ]

jobs:
  build-pack-publish:
    runs-on: windows-latest
    env:
      PROJECT_PATH: src/TripleG3.P2P/TripleG3.P2P.csproj
      NUGET_SOURCE: https://api.nuget.org/v3/index.json
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore $PROJECT_PATH

      - name: Compute Version
        id: version
        shell: pwsh
        run: |
          [xml]$xml = Get-Content $env:PROJECT_PATH
          $base = $xml.Project.PropertyGroup.Version
          if (-not $base) { Write-Error 'Could not read <Version> from csproj'; exit 1 }
          $parts = $base.Split('.')
            if ($parts.Length -lt 2) { Write-Error "Unexpected version format: $base"; exit 1 }
          $major = $parts[0]
          $minor = $parts[1]
          $patch = $env:GITHUB_RUN_NUMBER
          $newVersion = "$major.$minor.$patch"
          Write-Host "Resolved version: $newVersion (base $base)"
          "version=$newVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Append -Encoding utf8

      - name: Build (Release)
        run: dotnet build $PROJECT_PATH -c Release -p:ContinuousIntegrationBuild=true -p:Version=${{ steps.version.outputs.version }} --no-restore

      - name: Pack
        run: dotnet pack $PROJECT_PATH -c Release --no-build -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg -p:ContinuousIntegrationBuild=true -p:Version=${{ steps.version.outputs.version }} -o ./artifacts
      - name: Push to NuGet.org
        if: success() && env.NUGET_SOURCE == 'https://api.nuget.org/v3/index.json'
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: |
          if [ -z "$NUGET_API_KEY" ]; then
            echo "NUGET_API_KEY secret not set; skipping push." >&2
            exit 0
          fi
          set -e
          echo "Packages in artifacts directory:" >&2
          ls -1 artifacts || true
          for pkg in artifacts/*.nupkg; do
            [ -f "$pkg" ] || continue
            echo "Pushing $pkg" >&2
            dotnet nuget push $pkg --api-key "$NUGET_API_KEY" --source $NUGET_SOURCE --skip-duplicate --no-symbols
          done
          for sym in artifacts/*.snupkg; do
            [ -f "$sym" ] || continue
            echo "Pushing symbols $sym" >&2
            dotnet nuget push $sym --api-key "$NUGET_API_KEY" --source $NUGET_SOURCE --skip-duplicate || true
          done

  # NOTE: GitHub release creation intentionally removed. This workflow's
  # sole responsibility is to build, pack and push packages to NuGet.org.